/* src/pages/PieIndexLanding.svelte generated by Svelte v3.29.0 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { _ } from "../../web_modules/svelte-i18n.js";
import BigNumber from "../../web_modules/bignumberjs.js";
import get from "../../web_modules/lodash/get.js";
import first from "../../web_modules/lodash/first.js";
import flattenDeep from "../../web_modules/lodash/flattenDeep.js";
import { onMount } from "../../web_modules/svelte.js";
import { currentRoute } from "../stores/routes.js";
import TradingViewWidget from "../components/TradingViewWidget.js";
import Etherscan from "../components/Etherscan.js";
import Farming from "../components/Farming.js";
import Quantstamp from "../components/Quantstamp.js";
import PoolDescription from "../components/PoolDescription.js";
import images from "../config/images.json.proxy.js";
import poolsConfig from "../config/pools.json.proxy.js";
import { CoinGecko, piesMarketDataStore } from "../stores/coingecko.js";

import {
	fetchPooledTokens,
	pooledTokenAmountRequired
} from "../components/helpers.js";

import {
	amountFormatter,
	getTokenImage,
	formatFiat,
	fetchPieTokens
} from "../components/helpers.js";

import { pools } from "../stores/eth.js";
import { balanceKey, contract, balances } from "../stores/eth.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[19] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[22] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[25] = list[i];
	return child_ctx;
}

// (137:10) {#if change24H}
function create_if_block_3(ctx) {
	let h5;
	let t0;
	let t1;

	return {
		c() {
			h5 = element("h5");
			t0 = text(/*change24H*/ ctx[8]);
			t1 = text("%");
			attr(h5, "class", "text-sm leading-none font-thin");
			toggle_class(h5, "green", /*change24H*/ ctx[8] > 0);
			toggle_class(h5, "red", /*change24H*/ ctx[8] < 0);
		},
		m(target, anchor) {
			insert(target, h5, anchor);
			append(h5, t0);
			append(h5, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*change24H*/ 256) set_data(t0, /*change24H*/ ctx[8]);

			if (dirty & /*change24H*/ 256) {
				toggle_class(h5, "green", /*change24H*/ ctx[8] > 0);
			}

			if (dirty & /*change24H*/ 256) {
				toggle_class(h5, "red", /*change24H*/ ctx[8] < 0);
			}
		},
		d(detaching) {
			if (detaching) detach(h5);
		}
	};
}

// (145:10) {#if tokenPrice}
function create_if_block_2(ctx) {
	let h5;
	let t_value = formatFiat(/*tokenPrice*/ ctx[10]) + "";
	let t;

	return {
		c() {
			h5 = element("h5");
			t = text(t_value);
			attr(h5, "class", "text-xl leading-none font-thin");
		},
		m(target, anchor) {
			insert(target, h5, anchor);
			append(h5, t);
		},
		p(ctx, dirty) {
			if (dirty & /*tokenPrice*/ 1024 && t_value !== (t_value = formatFiat(/*tokenPrice*/ ctx[10]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(h5);
		}
	};
}

// (165:4) {#if get($piesMarketDataStore, `${token.toLowerCase()}.market_data.market_cap`, '-') != '-'}
function create_if_block_1(ctx) {
	let div2;
	let div0;
	let t1;
	let div1;
	let t2_value = formatFiat(get(/*$piesMarketDataStore*/ ctx[9], `${/*token*/ ctx[2]}.market_data.market_cap`, "-")) + "";
	let t2;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			div0.textContent = "MarketCap";
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			attr(div0, "class", "text-center font-thin text-xs md:text-base");
			attr(div1, "class", "text-center text-2xl md:text-xl font-black");
			attr(div2, "class", "p-0 self-start md:w-1/4");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div2, t1);
			append(div2, div1);
			append(div1, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*$piesMarketDataStore, token*/ 516 && t2_value !== (t2_value = formatFiat(get(/*$piesMarketDataStore*/ ctx[9], `${/*token*/ ctx[2]}.market_data.market_cap`, "-")) + "")) set_data(t2, t2_value);
		},
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

// (208:2) {#if pieOfPies }
function create_if_block(ctx) {
	let h4;
	let t1;
	let ul;
	let each_value_2 = /*pieOfPies*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	return {
		c() {
			h4 = element("h4");
			h4.textContent = "*This allocation is composed of multiple pies, find below the exploded allocation.";
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		m(target, anchor) {
			insert(target, h4, anchor);
			insert(target, t1, anchor);
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*pieOfPies*/ 1) {
				each_value_2 = /*pieOfPies*/ ctx[0];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d(detaching) {
			if (detaching) detach(h4);
			if (detaching) detach(t1);
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (211:6) {#each pieOfPies as subPie}
function create_each_block_2(ctx) {
	let li;
	let a;
	let t_value = /*subPie*/ ctx[25].symbol + "";
	let t;
	let a_href_value;

	return {
		c() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			attr(a, "href", a_href_value = "#/pie/" + /*subPie*/ ctx[25].address);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);
		},
		p(ctx, dirty) {
			if (dirty & /*pieOfPies*/ 1 && t_value !== (t_value = /*subPie*/ ctx[25].symbol + "")) set_data(t, t_value);

			if (dirty & /*pieOfPies*/ 1 && a_href_value !== (a_href_value = "#/pie/" + /*subPie*/ ctx[25].address)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (230:8) {#each composition as pooledToken}
function create_each_block_1(ctx) {
	let tr;
	let td0;
	let img0;
	let img0_src_value;
	let img0_alt_value;
	let t0;
	let t1_value = /*pooledToken*/ ctx[22].symbol + "";
	let t1;
	let t2;
	let td1;
	let t3_value = formatFiat(get(/*$piesMarketDataStore*/ ctx[9], `${/*pooledToken*/ ctx[22].address}.market_data.current_price`, "-")) + "";
	let t3;
	let t4;
	let td2;

	let t5_value = amountFormatter({
		amount: /*pooledToken*/ ctx[22].percentageUSD,
		displayDecimals: 2
	}) + "";

	let t5;
	let t6;
	let t7;
	let td3;
	let t8_value = formatFiat(get(/*$piesMarketDataStore*/ ctx[9], `${/*pooledToken*/ ctx[22].address}.market_data.market_cap`, "-")) + "";
	let t8;
	let t9;
	let td4;
	let t10_value = formatFiat(get(/*$piesMarketDataStore*/ ctx[9], `${/*pooledToken*/ ctx[22].address}.market_data.total_volume`, "-")) + "";
	let t10;
	let t11;
	let td5;
	let img1;
	let img1_src_value;
	let t12;

	return {
		c() {
			tr = element("tr");
			td0 = element("td");
			img0 = element("img");
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			td1 = element("td");
			t3 = text(t3_value);
			t4 = space();
			td2 = element("td");
			t5 = text(t5_value);
			t6 = text("%");
			t7 = space();
			td3 = element("td");
			t8 = text(t8_value);
			t9 = space();
			td4 = element("td");
			t10 = text(t10_value);
			t11 = space();
			td5 = element("td");
			img1 = element("img");
			t12 = space();
			attr(img0, "class", "inline icon ml-2 mr-2");
			if (img0.src !== (img0_src_value = getTokenImage(/*pooledToken*/ ctx[22].address))) attr(img0, "src", img0_src_value);
			attr(img0, "alt", img0_alt_value = /*pooledToken*/ ctx[22].symbol);
			attr(td0, "class", "border border-gray-800 px-2 py-2 text-left");
			attr(td1, "class", "border text-center px-4 py-2");
			attr(td2, "class", "border text-center px-4 py-2");
			attr(td3, "class", "border text-center px-4 py-2");
			attr(td4, "class", "border text-center px-4 py-2");
			attr(img1, "class", "w-30 spark mx-0");
			attr(img1, "alt", "Sparkline");
			if (img1.src !== (img1_src_value = "https://www.coingecko.com/coins/" + /*pooledToken*/ ctx[22].coingeckoImageId + "/sparkline")) attr(img1, "src", img1_src_value);
			set_style(img1, "margin", "auto");
			attr(td5, "class", "border text-center py-2");
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			append(td0, img0);
			append(td0, t0);
			append(td0, t1);
			append(tr, t2);
			append(tr, td1);
			append(td1, t3);
			append(tr, t4);
			append(tr, td2);
			append(td2, t5);
			append(td2, t6);
			append(tr, t7);
			append(tr, td3);
			append(td3, t8);
			append(tr, t9);
			append(tr, td4);
			append(td4, t10);
			append(tr, t11);
			append(tr, td5);
			append(td5, img1);
			append(tr, t12);
		},
		p(ctx, dirty) {
			if (dirty & /*composition*/ 2048 && img0.src !== (img0_src_value = getTokenImage(/*pooledToken*/ ctx[22].address))) {
				attr(img0, "src", img0_src_value);
			}

			if (dirty & /*composition*/ 2048 && img0_alt_value !== (img0_alt_value = /*pooledToken*/ ctx[22].symbol)) {
				attr(img0, "alt", img0_alt_value);
			}

			if (dirty & /*composition*/ 2048 && t1_value !== (t1_value = /*pooledToken*/ ctx[22].symbol + "")) set_data(t1, t1_value);
			if (dirty & /*$piesMarketDataStore, composition*/ 2560 && t3_value !== (t3_value = formatFiat(get(/*$piesMarketDataStore*/ ctx[9], `${/*pooledToken*/ ctx[22].address}.market_data.current_price`, "-")) + "")) set_data(t3, t3_value);

			if (dirty & /*composition*/ 2048 && t5_value !== (t5_value = amountFormatter({
				amount: /*pooledToken*/ ctx[22].percentageUSD,
				displayDecimals: 2
			}) + "")) set_data(t5, t5_value);

			if (dirty & /*$piesMarketDataStore, composition*/ 2560 && t8_value !== (t8_value = formatFiat(get(/*$piesMarketDataStore*/ ctx[9], `${/*pooledToken*/ ctx[22].address}.market_data.market_cap`, "-")) + "")) set_data(t8, t8_value);
			if (dirty & /*$piesMarketDataStore, composition*/ 2560 && t10_value !== (t10_value = formatFiat(get(/*$piesMarketDataStore*/ ctx[9], `${/*pooledToken*/ ctx[22].address}.market_data.total_volume`, "-")) + "")) set_data(t10, t10_value);

			if (dirty & /*composition*/ 2048 && img1.src !== (img1_src_value = "https://www.coingecko.com/coins/" + /*pooledToken*/ ctx[22].coingeckoImageId + "/sparkline")) {
				attr(img1, "src", img1_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(tr);
		}
	};
}

// (263:4) {#each links as link}
function create_each_block(ctx) {
	let a;
	let t_value = /*link*/ ctx[19].label + "";
	let t;
	let a_href_value;

	return {
		c() {
			a = element("a");
			t = text(t_value);
			attr(a, "class", "singleTag my-2");
			attr(a, "target", "_blank");
			attr(a, "href", a_href_value = /*link*/ ctx[19].url);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);
		},
		p(ctx, dirty) {
			if (dirty & /*links*/ 16 && t_value !== (t_value = /*link*/ ctx[19].label + "")) set_data(t, t_value);

			if (dirty & /*links*/ 16 && a_href_value !== (a_href_value = /*link*/ ctx[19].url)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

function create_fragment(ctx) {
	let div25;
	let div4;
	let div3;
	let div1;
	let a0;
	let img;
	let img_src_value;
	let a0_href_value;
	let t0;
	let div0;
	let a1;
	let h10;
	let t1;
	let a1_href_value;
	let t2;
	let t3;
	let t4;
	let div2;
	let a2;
	let button0;
	let a2_href_value;
	let t6;
	let a3;
	let button1;
	let a3_href_value;
	let t8;
	let div14;
	let show_if = get(/*$piesMarketDataStore*/ ctx[9], `${/*token*/ ctx[2].toLowerCase()}.market_data.market_cap`, "-") != "-";
	let t9;
	let div7;
	let div5;
	let t11;
	let div6;
	let t12;
	let t13;
	let t14;
	let div10;
	let t18;
	let div13;
	let div11;
	let t20;
	let div12;
	let t21_value = get(/*$piesMarketDataStore*/ ctx[9], `${/*token*/ ctx[2]}.market_data.price_change_percentage_7d_in_currency`, "-") + "";
	let t21;
	let t22;
	let div15;
	let tradingviewwidget;
	let div15_class_value;
	let t23;
	let div19;
	let div16;
	let farming;
	let t24;
	let div17;
	let etherscan;
	let t25;
	let div18;
	let quantstamp;
	let t26;
	let h11;
	let t28;
	let t29;
	let div20;
	let table;
	let thead;
	let t41;
	let tbody;
	let t42;
	let div21;
	let t43;
	let h12;
	let t45;
	let div24;
	let current;
	let if_block0 = /*change24H*/ ctx[8] && create_if_block_3(ctx);
	let if_block1 = /*tokenPrice*/ ctx[10] && create_if_block_2(ctx);
	let if_block2 = show_if && create_if_block_1(ctx);
	let tradingviewwidget_props = { options: /*options*/ ctx[3] };
	tradingviewwidget = new TradingViewWidget({ props: tradingviewwidget_props });
	/*tradingviewwidget_binding*/ ctx[14](tradingviewwidget);

	farming = new Farming({
			props: {
				token: /*$currentRoute*/ ctx[12].params.address
			}
		});

	etherscan = new Etherscan({
			props: {
				token: /*$currentRoute*/ ctx[12].params.address
			}
		});

	quantstamp = new Quantstamp({
			props: {
				class: "w-1/2",
				token: /*$currentRoute*/ ctx[12].params.address
			}
		});

	let if_block3 = /*pieOfPies*/ ctx[0] && create_if_block(ctx);
	let each_value_1 = /*composition*/ ctx[11];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*links*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div25 = element("div");
			div4 = element("div");
			div3 = element("div");
			div1 = element("div");
			a0 = element("a");
			img = element("img");
			t0 = space();
			div0 = element("div");
			a1 = element("a");
			h10 = element("h1");
			t1 = text(/*symbol*/ ctx[5]);
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			div2 = element("div");
			a2 = element("a");
			button0 = element("button");
			button0.textContent = "Redeem";
			t6 = space();
			a3 = element("a");
			button1 = element("button");
			button1.textContent = "Mint";
			t8 = space();
			div14 = element("div");
			if (if_block2) if_block2.c();
			t9 = space();
			div7 = element("div");
			div5 = element("div");
			div5.textContent = "Swap fee";
			t11 = space();
			div6 = element("div");
			t12 = text(/*swapFees*/ ctx[6]);
			t13 = text("%");
			t14 = space();
			div10 = element("div");

			div10.innerHTML = `<div class="text-center font-thin text-xs md:text-base">Streaming fee</div> 
      <div class="text-center text-2xl md:text-xl font-black">0%</div>`;

			t18 = space();
			div13 = element("div");
			div11 = element("div");
			div11.textContent = "7 Days Change";
			t20 = space();
			div12 = element("div");
			t21 = text(t21_value);
			t22 = space();
			div15 = element("div");
			create_component(tradingviewwidget.$$.fragment);
			t23 = space();
			div19 = element("div");
			div16 = element("div");
			create_component(farming.$$.fragment);
			t24 = space();
			div17 = element("div");
			create_component(etherscan.$$.fragment);
			t25 = space();
			div18 = element("div");
			create_component(quantstamp.$$.fragment);
			t26 = space();
			h11 = element("h1");
			h11.textContent = "Allocation breakdown";
			t28 = space();
			if (if_block3) if_block3.c();
			t29 = space();
			div20 = element("div");
			table = element("table");
			thead = element("thead");

			thead.innerHTML = `<tr><th class="font-thin border-b-2 px-4 py-2 text-left">Asset name</th> 
          <th class="font-thin border-b-2 px-4 py-2">Price</th> 
          <th class="font-thin border-b-2 px-4 py-2">Current Allocation</th> 
          <th class="font-thin border-b-2 px-4 py-2">Market Cap</th> 
          <th class="font-thin border-b-2 px-4 py-2">Volume</th> 
          <th class="font-thin border-b-2 px-4 py-2">Change</th></tr>`;

			t41 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t42 = space();
			div21 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t43 = space();
			h12 = element("h1");
			h12.textContent = "Latest news";
			t45 = space();
			div24 = element("div");

			div24.innerHTML = `<div class="w-full md:w-49pc"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Membership Proposal ✅ passed<br/><br/>The proposal will enable members <a href="https://twitter.com/TheLAOOfficial?ref_src=twsrc%5Etfw">@TheLAOOfficial</a> to join <a href="https://twitter.com/PieDAO_DeFi?ref_src=twsrc%5Etfw">@PieDAO_DeFi</a>, a fee-collecting organization coordinating weights of “tokenized asset allocations”, PIEs that is open to anyone <a href="https://twitter.com/ethereum?ref_src=twsrc%5Etfw">@ethereum</a> through the purchase of its voting shares, <a href="https://twitter.com/search?q=%24DOUGH&amp;src=ctag&amp;ref_src=twsrc%5Etfw">\$DOUGH</a> 💜 <a href="https://t.co/ikCkLTeGJy">https://t.co/ikCkLTeGJy</a>  <a href="https://t.co/4L13l1xsXl">pic.twitter.com/4L13l1xsXl</a></p>— ⟠ DeFi++ (@defiopfi) <a href="https://twitter.com/defiopfi/status/1299419505018515457?ref_src=twsrc%5Etfw">August 28, 2020</a></blockquote>  <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div> 
    <div class="w-full md:w-49pc"><blockquote class="twitter-tweet" data-conversation="none"><p lang="en" dir="ltr">1/2 Proposing a few changes to DEFI++<br/><br/>Model<br/>1) Using an 30d AVG for market cap to calculate weights (better in volatile markets)<br/><br/>Allocation<br/>1) Adding <a href="https://twitter.com/search?q=%24MLN&amp;src=ctag&amp;ref_src=twsrc%5Etfw">\$MLN</a> from <a href="https://twitter.com/melonprotocol?ref_src=twsrc%5Etfw">@melonprotocol</a> and <a href="https://twitter.com/search?q=%24PNT&amp;src=ctag&amp;ref_src=twsrc%5Etfw">\$PNT</a> from <a href="https://twitter.com/pTokens_io?ref_src=twsrc%5Etfw">@pTokens_io</a> on DEFI+S <br/>2) Adding <a href="https://twitter.com/search?q=%24YFI&amp;src=ctag&amp;ref_src=twsrc%5Etfw">\$YFI</a> to DEFI+L<br/><br/>By <a href="https://twitter.com/Alexintosh?ref_src=twsrc%5Etfw">@Alexintosh</a> via <a href="https://twitter.com/PieDAO_DeFi?ref_src=twsrc%5Etfw">@PieDAO_DeFi</a> Discord</p>— ⟠ DeFi++ (@defiopfi) <a href="https://twitter.com/defiopfi/status/1297027983459471360?ref_src=twsrc%5Etfw">August 22, 2020</a></blockquote>  <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>`;

			attr(img, "class", "h-80px inline");
			if (img.src !== (img_src_value = /*tokenLogo*/ ctx[7])) attr(img, "src", img_src_value);
			attr(img, "alt", /*symbol*/ ctx[5]);
			attr(a0, "href", a0_href_value = `#/pools/${/*token*/ ctx[2]}`);
			attr(h10, "class", "text-xl leading-none font-black");
			attr(a1, "href", a1_href_value = `#/pools/${/*token*/ ctx[2]}`);
			attr(div0, "class", "mx-3 flex flex-col justify-center");
			attr(div1, "class", "flex flex-row sm:w-full md:w-1/3");
			attr(button0, "class", "btn text-white font-bold ml-0 mr-1 rounded md:ml-4 py-2 px-4");
			attr(a2, "href", a2_href_value = `#/pools/${/*token*/ ctx[2]}/withdraw/multi`);
			attr(button1, "class", "btn text-white font-bold ml-0 mr-1 rounded md:ml-4 py-2 px-4");
			attr(a3, "href", a3_href_value = `#/pools/${/*token*/ ctx[2]}`);
			attr(div2, "class", "sm:w-full md:w-2/3 flex flex-row-reverse");
			attr(div3, "class", "flex flex-row content-between justify-between flex-wrap w-full");
			attr(div4, "class", "flex flex-wrap w-full");
			attr(div5, "class", "text-center font-thin text-xs md:text-base");
			attr(div6, "class", "text-center text-2xl md:text-xl font-black");
			attr(div7, "class", "p-0 md:w-1/4");
			attr(div10, "class", "p-0 md:w-1/4");
			attr(div11, "class", "text-center font-thin text-xs md:text-base");
			attr(div12, "class", "text-center text-2xl md:text-xl font-black");
			attr(div13, "class", "p-0 md:w-1/4");
			attr(div14, "class", "flex justify-between flex-wrap w-full mt-2 md:mt-8");

			attr(div15, "class", div15_class_value = "flex flex-row w-100pc mt-2 spl-chart-container md:mt-8 " + (poolsConfig[/*token*/ ctx[2]].mapDynamicTradingViewFormula
			? ""
			: "hidden"));

			attr(div16, "class", "p-0 mt-2 md:half");
			attr(div17, "class", "p-0 mt-2 md:w-1/4");
			attr(div18, "class", "p-0 mt-2 md:w-1/4");
			attr(div19, "class", "flex flex-col w-full mt-2 md:mt-8 md:justify-between md:flex-row");
			attr(h11, "class", "mt-8 mb-4 text-base md:text-3xl");
			attr(table, "class", "breakdown-table table-auto w-full");
			attr(div20, "class", "w-99pc m-4");
			attr(div21, "class", "tags-container w-full my-2 flex flex-col md:flex-row md:justify-between md:my-8");
			attr(h12, "class", "mt-8 mb-4 text-base md:text-3xl");
			attr(div24, "class", "flex flex-col w-full justify-between md:flex-row");
			attr(div25, "class", "content flex flex-col spl");
		},
		m(target, anchor) {
			insert(target, div25, anchor);
			append(div25, div4);
			append(div4, div3);
			append(div3, div1);
			append(div1, a0);
			append(a0, img);
			append(div1, t0);
			append(div1, div0);
			append(div0, a1);
			append(a1, h10);
			append(h10, t1);
			append(div0, t2);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t3);
			if (if_block1) if_block1.m(div0, null);
			append(div3, t4);
			append(div3, div2);
			append(div2, a2);
			append(a2, button0);
			append(div2, t6);
			append(div2, a3);
			append(a3, button1);
			append(div25, t8);
			append(div25, div14);
			if (if_block2) if_block2.m(div14, null);
			append(div14, t9);
			append(div14, div7);
			append(div7, div5);
			append(div7, t11);
			append(div7, div6);
			append(div6, t12);
			append(div6, t13);
			append(div14, t14);
			append(div14, div10);
			append(div14, t18);
			append(div14, div13);
			append(div13, div11);
			append(div13, t20);
			append(div13, div12);
			append(div12, t21);
			append(div25, t22);
			append(div25, div15);
			mount_component(tradingviewwidget, div15, null);
			append(div25, t23);
			append(div25, div19);
			append(div19, div16);
			mount_component(farming, div16, null);
			append(div19, t24);
			append(div19, div17);
			mount_component(etherscan, div17, null);
			append(div19, t25);
			append(div19, div18);
			mount_component(quantstamp, div18, null);
			append(div25, t26);
			append(div25, h11);
			append(div25, t28);
			if (if_block3) if_block3.m(div25, null);
			append(div25, t29);
			append(div25, div20);
			append(div20, table);
			append(table, thead);
			append(table, t41);
			append(table, tbody);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(tbody, null);
			}

			append(div25, t42);
			append(div25, div21);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div21, null);
			}

			append(div25, t43);
			append(div25, h12);
			append(div25, t45);
			append(div25, div24);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*tokenLogo*/ 128 && img.src !== (img_src_value = /*tokenLogo*/ ctx[7])) {
				attr(img, "src", img_src_value);
			}

			if (!current || dirty & /*symbol*/ 32) {
				attr(img, "alt", /*symbol*/ ctx[5]);
			}

			if (!current || dirty & /*token*/ 4 && a0_href_value !== (a0_href_value = `#/pools/${/*token*/ ctx[2]}`)) {
				attr(a0, "href", a0_href_value);
			}

			if (!current || dirty & /*symbol*/ 32) set_data(t1, /*symbol*/ ctx[5]);

			if (!current || dirty & /*token*/ 4 && a1_href_value !== (a1_href_value = `#/pools/${/*token*/ ctx[2]}`)) {
				attr(a1, "href", a1_href_value);
			}

			if (/*change24H*/ ctx[8]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(div0, t3);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*tokenPrice*/ ctx[10]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					if_block1.m(div0, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (!current || dirty & /*token*/ 4 && a2_href_value !== (a2_href_value = `#/pools/${/*token*/ ctx[2]}/withdraw/multi`)) {
				attr(a2, "href", a2_href_value);
			}

			if (!current || dirty & /*token*/ 4 && a3_href_value !== (a3_href_value = `#/pools/${/*token*/ ctx[2]}`)) {
				attr(a3, "href", a3_href_value);
			}

			if (dirty & /*$piesMarketDataStore, token*/ 516) show_if = get(/*$piesMarketDataStore*/ ctx[9], `${/*token*/ ctx[2].toLowerCase()}.market_data.market_cap`, "-") != "-";

			if (show_if) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					if_block2.m(div14, t9);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (!current || dirty & /*swapFees*/ 64) set_data(t12, /*swapFees*/ ctx[6]);
			if ((!current || dirty & /*$piesMarketDataStore, token*/ 516) && t21_value !== (t21_value = get(/*$piesMarketDataStore*/ ctx[9], `${/*token*/ ctx[2]}.market_data.price_change_percentage_7d_in_currency`, "-") + "")) set_data(t21, t21_value);
			const tradingviewwidget_changes = {};
			if (dirty & /*options*/ 8) tradingviewwidget_changes.options = /*options*/ ctx[3];
			tradingviewwidget.$set(tradingviewwidget_changes);

			if (!current || dirty & /*token*/ 4 && div15_class_value !== (div15_class_value = "flex flex-row w-100pc mt-2 spl-chart-container md:mt-8 " + (poolsConfig[/*token*/ ctx[2]].mapDynamicTradingViewFormula
			? ""
			: "hidden"))) {
				attr(div15, "class", div15_class_value);
			}

			const farming_changes = {};
			if (dirty & /*$currentRoute*/ 4096) farming_changes.token = /*$currentRoute*/ ctx[12].params.address;
			farming.$set(farming_changes);
			const etherscan_changes = {};
			if (dirty & /*$currentRoute*/ 4096) etherscan_changes.token = /*$currentRoute*/ ctx[12].params.address;
			etherscan.$set(etherscan_changes);
			const quantstamp_changes = {};
			if (dirty & /*$currentRoute*/ 4096) quantstamp_changes.token = /*$currentRoute*/ ctx[12].params.address;
			quantstamp.$set(quantstamp_changes);

			if (/*pieOfPies*/ ctx[0]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					if_block3.m(div25, t29);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (dirty & /*composition, formatFiat, get, $piesMarketDataStore, amountFormatter, getTokenImage*/ 2560) {
				each_value_1 = /*composition*/ ctx[11];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(tbody, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*links*/ 16) {
				each_value = /*links*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div21, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;
			transition_in(tradingviewwidget.$$.fragment, local);
			transition_in(farming.$$.fragment, local);
			transition_in(etherscan.$$.fragment, local);
			transition_in(quantstamp.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tradingviewwidget.$$.fragment, local);
			transition_out(farming.$$.fragment, local);
			transition_out(etherscan.$$.fragment, local);
			transition_out(quantstamp.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div25);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			/*tradingviewwidget_binding*/ ctx[14](null);
			destroy_component(tradingviewwidget);
			destroy_component(farming);
			destroy_component(etherscan);
			destroy_component(quantstamp);
			if (if_block3) if_block3.d();
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $piesMarketDataStore;
	let $pools;
	let $balances;
	let $currentRoute;
	component_subscribe($$self, piesMarketDataStore, $$value => $$invalidate(9, $piesMarketDataStore = $$value));
	component_subscribe($$self, pools, $$value => $$invalidate(16, $pools = $$value));
	component_subscribe($$self, balances, $$value => $$invalidate(18, $balances = $$value));
	component_subscribe($$self, currentRoute, $$value => $$invalidate(12, $currentRoute = $$value));
	let { params } = $$props;
	let pieOfPies = false;
	let tradingViewWidgetComponent;
	let initialized = false;

	function tradingviewwidget_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			tradingViewWidgetComponent = $$value;
			$$invalidate(1, tradingViewWidgetComponent);
		});
	}

	$$self.$$set = $$props => {
		if ("params" in $$props) $$invalidate(13, params = $$props.params);
	};

	let token;
	let options;
	let links;
	let symbol;
	let swapFees;
	let tokenLogo;
	let change24H;
	let tokenPrice;
	let composition;
	let pieTokens;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*params*/ 8192) {
			$: $$invalidate(2, token = params.address);
		}

		if ($$self.$$.dirty & /*token*/ 4) {
			$: console.log(token, poolsConfig);
		}

		if ($$self.$$.dirty & /*token*/ 4) {
			$: $$invalidate(3, options = {
				symbol: poolsConfig[token]
				? poolsConfig[token].tradingViewFormula
				: "",
				container_id: `single-pie-chart-${token}`,
				theme: "light",
				autosize: true,
				interval: "60",
				locale: "en",
				style: 3,
				hide_top_toolbar: true,
				hide_legend: true,
				allow_symbol_change: false
			});
		}

		if ($$self.$$.dirty & /*token*/ 4) {
			$: $$invalidate(4, links = (poolsConfig[token] || {}).landingLinks || []);
		}

		if ($$self.$$.dirty & /*token*/ 4) {
			$: $$invalidate(5, symbol = (poolsConfig[token] || {}).symbol);
		}

		if ($$self.$$.dirty & /*token*/ 4) {
			$: $$invalidate(6, swapFees = (poolsConfig[token] || {}).swapFees);
		}

		if ($$self.$$.dirty & /*token*/ 4) {
			$: $$invalidate(7, tokenLogo = images.logos[token]);
		}

		if ($$self.$$.dirty & /*$piesMarketDataStore, token*/ 516) {
			$: $$invalidate(8, change24H = get($piesMarketDataStore, `${token}.market_data.price_change_percentage_24h`, null));
		}

		if ($$self.$$.dirty & /*$piesMarketDataStore, token*/ 516) {
			$: $$invalidate(10, tokenPrice = get($piesMarketDataStore, `${token.toLowerCase()}.market_data.current_price`, null));
		}

		if ($$self.$$.dirty & /*token*/ 4) {
			$: (() => {
				$$invalidate(0, pieOfPies = false);
			})(token);
		}

		if ($$self.$$.dirty & /*$pools, token, pieOfPies*/ 65541) {
			$: $$invalidate(11, composition = flattenDeep($pools[token].map(component => {
				if (component.isPie) {
					if (!pieOfPies) $$invalidate(0, pieOfPies = []);
					pieOfPies.push(component);

					return $pools[component.address].map(internal => {
						return {
							...internal,
							percentage: (component.percentage / 100 * (internal.percentage / 100) * 100).toFixed(2)
						};
					});
				}

				return component;
			})));
		}

		if ($$self.$$.dirty & /*$balances*/ 262144) {
			$: pieTokens = fetchPieTokens($balances);
		}

		if ($$self.$$.dirty & /*initialized, token, $pools, $balances, tradingViewWidgetComponent, options*/ 360462) {
			$: (async () => {
				if (initialized) return;
				let mapDynamicTradingViewFormula = poolsConfig[token].mapDynamicTradingViewFormula;
				let formula = "";
				const poolContract = await contract({ address: token });
				const bPoolAddress = await poolContract.getBPool();
				let totalSupply = await poolContract.totalSupply();
				totalSupply = BigNumber(totalSupply.toString()).dividedBy(10 ** 18);

				$pools[token].map(component => {
					let key = `${component.address.toLowerCase()}.${bPoolAddress.toLowerCase()}`;
					const bal = $balances[key] || 0;

					if (bal !== 0) {
						formula += `${bal / totalSupply.toNumber()}*${mapDynamicTradingViewFormula[component.address]}+`;
					}
				});

				if (formula !== "") {
					const finalFormula = `${formula.slice(0, -1)}`;
					console.log(`formula`, finalFormula);
					$$invalidate(3, options.symbol = finalFormula, options);

					if (tradingViewWidgetComponent) {
						$$invalidate(15, initialized = true);
						tradingViewWidgetComponent.initWidget(options);
					}
				}
			})();
		}
	};

	return [
		pieOfPies,
		tradingViewWidgetComponent,
		token,
		options,
		links,
		symbol,
		swapFees,
		tokenLogo,
		change24H,
		$piesMarketDataStore,
		tokenPrice,
		composition,
		$currentRoute,
		params,
		tradingviewwidget_binding
	];
}

class PieIndexLanding extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { params: 13 });
	}
}

export default PieIndexLanding;