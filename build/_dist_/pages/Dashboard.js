/* src/pages/Dashboard.svelte generated by Svelte v3.29.0 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import BigNumber from "../../web_modules/bignumberjs.js";
import orderBy from "../../web_modules/lodash/orderBy.js";
import BalanceSmall from "../components/BalanceSmall.js";
import FarmerTable from "../components/FarmerTable.js";
import { currentRoute } from "../stores/routes.js";
import poolsConfig from "../config/pools.json.proxy.js";
import { CoinGecko, piesMarketDataStore } from "../stores/coingecko.js";
import { pools } from "../stores/eth.js";
import images from "../config/images.json.proxy.js";
import { getTokenImage, formatFiat } from "../components/helpers.js";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (181:10) {#each pie.composition as coin}
function create_each_block_1(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "close-icons inline icon");
			if (img.src !== (img_src_value = getTokenImage(/*coin*/ ctx[7].address))) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*coin*/ ctx[7].symbol);
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*pies*/ 1 && img.src !== (img_src_value = getTokenImage(/*coin*/ ctx[7].address))) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*pies*/ 1 && img_alt_value !== (img_alt_value = /*coin*/ ctx[7].symbol)) {
				attr(img, "alt", img_alt_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (166:4) {#each pies as pie}
function create_each_block(ctx) {
	let div7;
	let div0;
	let a0;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let span;
	let t1_value = /*pie*/ ctx[4].symbol + "";
	let t1;
	let a0_href_value;
	let t2;
	let div1;
	let a1;
	let a1_href_value;
	let t3;
	let div2;
	let a2;
	let t4_value = /*pie*/ ctx[4].totalLiquidity + "";
	let t4;
	let a2_href_value;
	let t5;
	let div3;
	let a3;
	let button0;
	let a3_href_value;
	let t7;
	let div4;
	let a4;
	let button1;
	let a4_href_value;
	let t9;
	let div5;
	let a5;
	let button2;
	let a5_href_value;
	let t11;
	let div6;
	let button3;
	let t13;
	let mounted;
	let dispose;
	let each_value_1 = /*pie*/ ctx[4].composition;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	function click_handler(...args) {
		return /*click_handler*/ ctx[2](/*pie*/ ctx[4], ...args);
	}

	return {
		c() {
			div7 = element("div");
			div0 = element("div");
			a0 = element("a");
			img = element("img");
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			div1 = element("div");
			a1 = element("a");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			div2 = element("div");
			a2 = element("a");
			t4 = text(t4_value);
			t5 = space();
			div3 = element("div");
			a3 = element("a");
			button0 = element("button");
			button0.textContent = "Buy";
			t7 = space();
			div4 = element("div");
			a4 = element("a");
			button1 = element("button");
			button1.textContent = "Mint";
			t9 = space();
			div5 = element("div");
			a5 = element("a");
			button2 = element("button");
			button2.textContent = "Redeem";
			t11 = space();
			div6 = element("div");
			button3 = element("button");
			button3.textContent = "Add to MetaMask 🦊";
			t13 = space();
			attr(img, "class", "inline icon ml-2 mr-2");
			if (img.src !== (img_src_value = /*pie*/ ctx[4].icon)) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*pie*/ ctx[4].symbol);
			attr(span, "class", "md:block");
			attr(a0, "class", "flex items-center px-2");
			attr(a0, "href", a0_href_value = `#/pie/${/*pie*/ ctx[4].address}`);
			attr(div0, "class", "text-center thinborderight items-stretch md:block w-15pc");
			attr(a1, "class", "");
			attr(a1, "href", a1_href_value = `#/pie/${/*pie*/ ctx[4].address}`);
			attr(div1, "class", "text-center thinborderight block w-18pc w-18pc md:block");
			attr(a2, "href", a2_href_value = `#/pie/${/*pie*/ ctx[4].address}`);
			attr(div2, "class", "text-center px-4 thinborderight w-18pc");
			attr(button0, "class", "table-btn highlight-box min-w-70px");
			attr(a3, "target", "_blank");
			attr(a3, "href", a3_href_value = `https://balancer.exchange/#/swap/ether/${/*pie*/ ctx[4].address}`);
			attr(div3, "class", "text-center px-4 thinborderight w-10pc");
			attr(button1, "class", "table-btn min-w-70px");
			attr(a4, "href", a4_href_value = `#/pools/${/*pie*/ ctx[4].address}`);
			attr(div4, "class", "text-center px-4 thinborderight w-10pc");
			attr(button2, "class", "table-btn min-w-70px");
			attr(a5, "href", a5_href_value = `#/pools/${/*pie*/ ctx[4].address}/withdraw/multi`);
			attr(div5, "class", "text-center px-4 thinborderight w-10pc");
			attr(button3, "class", "table-btn min-w-70px");
			attr(div6, "class", "text-center px-4 w-16pc");
			attr(div7, "class", "flex w-100pc min-w-1140px min-h-50px justify-between items-center py-3 negativetop thinborder");
		},
		m(target, anchor) {
			insert(target, div7, anchor);
			append(div7, div0);
			append(div0, a0);
			append(a0, img);
			append(a0, t0);
			append(a0, span);
			append(span, t1);
			append(div7, t2);
			append(div7, div1);
			append(div1, a1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(a1, null);
			}

			append(div7, t3);
			append(div7, div2);
			append(div2, a2);
			append(a2, t4);
			append(div7, t5);
			append(div7, div3);
			append(div3, a3);
			append(a3, button0);
			append(div7, t7);
			append(div7, div4);
			append(div4, a4);
			append(a4, button1);
			append(div7, t9);
			append(div7, div5);
			append(div5, a5);
			append(a5, button2);
			append(div7, t11);
			append(div7, div6);
			append(div6, button3);
			append(div7, t13);

			if (!mounted) {
				dispose = listen(button3, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*pies*/ 1 && img.src !== (img_src_value = /*pie*/ ctx[4].icon)) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*pies*/ 1 && img_alt_value !== (img_alt_value = /*pie*/ ctx[4].symbol)) {
				attr(img, "alt", img_alt_value);
			}

			if (dirty & /*pies*/ 1 && t1_value !== (t1_value = /*pie*/ ctx[4].symbol + "")) set_data(t1, t1_value);

			if (dirty & /*pies*/ 1 && a0_href_value !== (a0_href_value = `#/pie/${/*pie*/ ctx[4].address}`)) {
				attr(a0, "href", a0_href_value);
			}

			if (dirty & /*getTokenImage, pies*/ 1) {
				each_value_1 = /*pie*/ ctx[4].composition;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(a1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (dirty & /*pies*/ 1 && a1_href_value !== (a1_href_value = `#/pie/${/*pie*/ ctx[4].address}`)) {
				attr(a1, "href", a1_href_value);
			}

			if (dirty & /*pies*/ 1 && t4_value !== (t4_value = /*pie*/ ctx[4].totalLiquidity + "")) set_data(t4, t4_value);

			if (dirty & /*pies*/ 1 && a2_href_value !== (a2_href_value = `#/pie/${/*pie*/ ctx[4].address}`)) {
				attr(a2, "href", a2_href_value);
			}

			if (dirty & /*pies*/ 1 && a3_href_value !== (a3_href_value = `https://balancer.exchange/#/swap/ether/${/*pie*/ ctx[4].address}`)) {
				attr(a3, "href", a3_href_value);
			}

			if (dirty & /*pies*/ 1 && a4_href_value !== (a4_href_value = `#/pools/${/*pie*/ ctx[4].address}`)) {
				attr(a4, "href", a4_href_value);
			}

			if (dirty & /*pies*/ 1 && a5_href_value !== (a5_href_value = `#/pools/${/*pie*/ ctx[4].address}/withdraw/multi`)) {
				attr(a5, "href", a5_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div7);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div12;
	let img;
	let img_src_value;
	let t0;
	let div11;
	let div0;
	let t4;
	let div9;
	let div8;
	let t17;
	let t18;
	let div10;
	let t24;
	let farmertable;
	let current;
	let each_value = /*pies*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	farmertable = new FarmerTable({});

	return {
		c() {
			div12 = element("div");
			img = element("img");
			t0 = space();
			div11 = element("div");
			div0 = element("div");

			div0.innerHTML = `<h1 class="text-lg">🥧 Explore Pies</h1> 
      <p class="font-thin">An Entire Portfolio in a Single Token</p>`;

			t4 = space();
			div9 = element("div");
			div8 = element("div");

			div8.innerHTML = `<div class="font-thin text-left px-1pc items-stretch md:block w-15pc">Pie Name</div> 
      <div class="font-thin text-center px-1pc block w-18pc md:block">Assets</div> 
      <div class="font-thin text-center px-1pc w-18pc">Liquidity</div> 
      <div class="font-thin text-center px-1pc w-10pc">Market Buy</div> 
      <div class="font-thin text-center px-1pc w-10pc">Mint tokens</div> 
      <div class="font-thin text-center px-1pc w-10pc">Unwrap</div> 
      <div class="font-thin ext-center px-1pc w-16pc"></div>`;

			t17 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t18 = space();
			div10 = element("div");

			div10.innerHTML = `<h1 class="text-lg">👨‍🌾 Honest worker? Explore Pie Farming Opportunities</h1> 
      <p class="font-thin">Add liquidity to earn fees and DOUGH incentives.</p> 
      <p class="font-thin">ℹ️ APR does not account for gains or losses from holding liquidity tokens.</p>`;

			t24 = space();
			create_component(farmertable.$$.fragment);
			attr(img, "alt", "ready to diversify?");
			if (img.src !== (img_src_value = images.amazingrewards)) attr(img, "src", img_src_value);
			attr(div0, "class", "my-10");
			attr(div8, "class", "flex w-100pc min-w-1140px min-h-50px justify-center items-center py-3 mb-2 negativetop");
			attr(div9, "class", "flex flex-col w-100pc breakdown-table pt-2px");
			attr(div10, "class", "mt-20 mb-0");
			attr(div11, "class", "w-99pc m-4");
			attr(div12, "class", "content flex flex-col spl");
		},
		m(target, anchor) {
			insert(target, div12, anchor);
			append(div12, img);
			append(div12, t0);
			append(div12, div11);
			append(div11, div0);
			append(div11, t4);
			append(div11, div9);
			append(div9, div8);
			append(div9, t17);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div9, null);
			}

			append(div11, t18);
			append(div11, div10);
			insert(target, t24, anchor);
			mount_component(farmertable, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*addToken, pies, getTokenImage*/ 3) {
				each_value = /*pies*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div9, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;
			transition_in(farmertable.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(farmertable.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div12);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t24);
			destroy_component(farmertable, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $pools;
	component_subscribe($$self, pools, $$value => $$invalidate(3, $pools = $$value));

	const addToken = pie => {
		ethereum.sendAsync(
			{
				method: "wallet_watchAsset",
				params: {
					"type": "ERC20",
					"options": {
						"address": pie.address,
						"symbol": pie.symbol,
						"decimals": 18,
						"image": pie.icon
					}
				},
				id: Math.round(Math.random() * 100000)
			},
			(err, added) => {
				if (added) {
					console.log("Thanks for your interest!");
				} else {
					alert("Something went wrong. Is Metamask there?");
				}
			}
		);
	};

	const click_handler = pie => addToken(pie);
	let pies;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$pools*/ 8) {
			$: $$invalidate(0, pies = orderBy(
				poolsConfig.selectable.map(address => {
					return {
						...poolsConfig[address],
						address,
						icon: getTokenImage(address),
						totalLiquidity: $pools[`${address}-usd`]
						? formatFiat($pools[`${address}-usd`].toFixed(2).toString())
						: "-",
						totalLiquidityNum: $pools[`${address}-usd`]
						? $pools[`${address}-usd`].toNumber()
						: 0
					};
				}) || [],
				["totalLiquidityNum"],
				["desc"]
			));
		}
	};

	return [pies, addToken, click_handler];
}

class Dashboard extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Dashboard;